From 527f3cf1efe588d350b2378be8bc555dc928eeb7 Mon Sep 17 00:00:00 2001
From: soulteary <soulteary@gmail.com>
Date: Fri, 7 May 2021 14:58:31 +0800
Subject: [PATCH] async add bookmarks

---
 internal/webserver/handler-api.go | 56 ++++++++++++++++---------------
 1 file changed, 29 insertions(+), 27 deletions(-)

diff --git a/internal/webserver/handler-api.go b/internal/webserver/handler-api.go
index 82ba1a3..adc7ece 100644
--- a/internal/webserver/handler-api.go
+++ b/internal/webserver/handler-api.go
@@ -261,41 +261,43 @@ func (h *handler) apiInsertBookmark(w http.ResponseWriter, r *http.Request, ps h
 		panic(fmt.Errorf("failed to clean URL: %v", err))
 	}
 
-	// Fetch data from internet
-	var isFatalErr bool
-	content, contentType, err := core.DownloadBookmark(book.URL)
-	if err == nil && content != nil {
-		request := core.ProcessRequest{
-			DataDir:     h.DataDir,
-			Bookmark:    book,
-			Content:     content,
-			ContentType: contentType,
-		}
+	go func() {
+		// Fetch data from internet
+		var isFatalErr bool
+		content, contentType, err := core.DownloadBookmark(book.URL)
+		if err == nil && content != nil {
+			request := core.ProcessRequest{
+				DataDir:     h.DataDir,
+				Bookmark:    book,
+				Content:     content,
+				ContentType: contentType,
+			}
 
-		book, isFatalErr, err = core.ProcessBookmark(request)
-		content.Close()
+			book, isFatalErr, err = core.ProcessBookmark(request)
+			content.Close()
 
-		if err != nil && isFatalErr {
-			panic(fmt.Errorf("failed to process bookmark: %v", err))
+			if err != nil && isFatalErr {
+				fmt.Errorf("failed to process bookmark: %v", err)
+				return
+			}
 		}
-	}
 
-	// Make sure bookmark's title not empty
-	if book.Title == "" {
-		book.Title = book.URL
-	}
+		// Make sure bookmark's title not empty
+		if book.Title == "" {
+			book.Title = book.URL
+		}
 
-	// Save bookmark to database
-	results, err := h.DB.SaveBookmarks(book)
-	if err != nil || len(results) == 0 {
-		panic(fmt.Errorf("failed to save bookmark: %v", err))
-	}
-	book = results[0]
+		// Save bookmark to database
+		results, err := h.DB.SaveBookmarks(book)
+		if err != nil || len(results) == 0 {
+			fmt.Errorf("failed to save bookmark: %v", err)
+			return
+		}
+	}()
 
 	// Return the new bookmark
 	w.Header().Set("Content-Type", "application/json")
-	err = json.NewEncoder(w).Encode(&book)
-	checkError(err)
+	w.Write([]byte(`{"code":201}`))
 }
 
 // apiDeleteBookmarks is handler for DELETE /api/bookmark
